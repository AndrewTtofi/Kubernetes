Introduction to Kubernetes: https://www.youtube.com/watch?v=X48VuDVv0do&t=9s&ab_channel=TechWorldwithNana

Official definition of Kubernetes:
    Open source container orchestration tool
    Developed by Google
    Helps you manage containerized applications in different deployment environments

What problems does Kubernetes solve?
    The need of a container orchestration tool:
        -Trend from Monolith to Microservices
        -Increased usage of containers
        -Demand for a proper way of managing those hundres of containers

What features do orchestration tools offer?
    -High availability or no downtime
    -Scalability or high performance
    -Disaster recovery - backup and restore

Kubernetes Components:
    Nodes:
        The physical or virtual server which our pods will run on.
    Pods
        The smallest unit of K8S
        Abstraction over container
        Usually 1 application runs per Pod
        Pods are ephemeral components (they can die at any given moment) 

    Service and Ingress:
        -Permanent IP address over pods (even if they die)
        -Lifecycle of Pod and Service are not connected
        -Service uses Ingress component in order to apply https protocol and change the url
            e.g http://19.21.4.5:8080 to https://myapp.com

    External Service and Internal Service:
        External Service is used when your pod must receive and send request to the internet.
        Internal Service is when your pod just wants to communicate internaly.
    
    ConfigMap:
        External configuration of your application:
            e.g you have named a DB my-db and you want to rename to andreas-db
            instead of going to your code, making the change, changing the image,
            rebuilding the container-> you go to ConfigMap and change the DB_URL = andreas-db
            You could also use this component for easily changing password and username BUT 
            K8S uses another component for something like that called Secret.
    
    Secret:
        Secret is like ConfigMap but is used to store sensitive and secret data such as Credentials.
        It is base54 encoded
        The built-in security mechanism is not enabled by default.
    
    
    Volumes:
        Volumes acts as an external storage for Pods and can be used either from the local machine
        or remotely, outside the K8S cluster (cloud or onpremise storage).
        K8S does not manage data persistance!
    
    Deployment:
       Blueprints for pods:
            Create a blueprint that would include the specs, requirements and dependencies of pods and would allow to autodeploy them
            when necessary.
        You create Deoployments that would allow you to define how many replicas of a pod would run.
        At practice instead of working with pods, we would work with Deployments.
        DB cant be replicated via Deployment.
    
    StatefulSet:
        This component is used for DB pods in order for the storage were our current state data are written to be written ONLY by the
        working DB pod.
        Its only used from Stateful Apps -> mongodb, mysql etc.
        Since the above can be tricky, a common practise is to host the DB outside of K8S cluster.
        



Example of how Kubernetes works:
    You have 2 pods that run on a node.
    1 of your pods is the actual application and the other is the DB.
    K8S out of the box offer a virtual network so each of those pods get their own unique IP.
    If a pod dies (ephemeral component) a new IP will be assigned on the new pod created.
    In order to provide a static IP to our customer we use the Service.
    The app pod will communicate with the Service that will provide that static IP. 
    In order to have no downtime we replicate our node to a new one.
    New pods in the new node are create in case of a pod death, the service will communicate with the new pod and bring up the application in notime.
    A service is also a load balancer. It will distribute the requests received to whichever pod is available.
What is a Master and a Slave?
How does a Kubernetes cluster can be self-healed?


Lets Go:
    A running Node in order to run pods it has 3 main components that need to be installed:
        -Container Runtime
        -Kubelet:
            Kubelet interacts with both the container and the node
            Kubelet is responsible to start the pod with a container inside
        -Kube Proxy:
            Kube Proxy forwards the requests received from the Service

How do you interact with this cluster?
    How to:
        Schedule pod
        Monitor
        re-schedule/restart pod
        join a new Node
    
                                --> MASTER Nodes
    
Master Nodes:
    Master nodes have 4 processes that run on EVERY master node:
        -Api Server
            like cluster gateway
            acts as a gatekeeper for authentication
            Request->API Server->validates request->other processes->creation of pod or interaction with pod
        -Scheduler
            Schedule new Pod->API Server->Scheduler->Where to put the Pod? (will decide on which node the pod will run)->Kubelet
        -Controller Manager
            Detects cluster state changes
            Controller Manager->Scheduler->Kubelet->Pod
        -etcd
            etcd is the cluser brain
            Cluster changes get stored in the key value store (when a pod dies or is created)
        
        Example: How does a scheduler know what resources are available on the nodes?
                 How does a controller manager detects that a cluster state changed?
                 A query request is run through Api Server to check if the cluster is healthy?
                 All of the above information is stored in etcd
        
        Application data is not stored in etcd though.
        
3 Parts of a configuration file:
    1) Metadata
        Name, Labels etc.
    2) Specification
        Attributes of the Specification section are SPECIFIC to the kind of the file (Deployment, Service, etc)
    3) Status
        Automatically created from Kubernetes.
        Compares the desired state and the Actual state. In case they do not match, Kubernetes will try to fix it.
        This is part of the self healing process from Kubernetes.
        
What is Minikube and Kubectl? (Set up a Minikube cluster)
    What is minikube?
        In a production Cluster Setup we usually have at least 2 Master nodes and multiple worker nodes
        So this happens on a VM.
        How do you test it on a local machine?
        What a minikube does is that it runs both Master and Worker processes on 1 node, on 1 machine.
        One way to run it locally is through a virtual box.
        So minikube will create a virtual box on the local pc and then run the Node in that Virtual Box.
            So minikube is 1 Node K8s cluster that runs on 1 Node in a Virtual Box.
            It can be used for testing of Kubernetes on my local setup.

    What is kubectl?
        API Process has 3 to be interacted with (hence with the cluster):
            UI
            API
            CLI -> cli componment is the most powerful one and is also called kubectl

Commands:
    minikube start -> start a local Kubernetes cluster on the local machine (prerequisites: https://minikube.sigs.k8s.io/docs/start/)
                      I find it a bit difficult to work on Windows so I switched to my Mac.

    kubectl <command> -> this is the way I manage all of my K8s stuff.
                        Commands:
                            deployment (create, delete etc.)
                            services (e.g replicaset)
                            delete (deployment, pod)
                            apply (conf file)
                            get (e.g pods, nodes)
